# coordinate_task.yaml
name: "coordinate_task"
version: "1.3.0"
description: "Coordinate complex tasks across multiple AI agents. Decomposes tasks, assigns subtasks to appropriate agents, and integrates results into a coherent response."
category: "coordination"
keywords: ["coordinate", "task", "multi-agent", "decompose", "integrate", "workflow", "orchestration"]
priority: 1

# Tool execution metadata
execution:
  type: "hybrid"
  timeout: 60000
  retries: 1
  requires_auth: false
  requires_data: false
  requires_network: false

# Input parameters (JSON Schema format)
parameters:
  type: "object"
  properties:
    task:
      type: "string"
      description: "Description of the complex task to coordinate"
      examples: ["Analyze the lacZ gene and find similar proteins", "Generate a synthetic operon with regulatory elements"]
    priority:
      type: "string"
      enum: ["low", "normal", "high", "urgent"]
      description: "Task priority level"
      default: "normal"
    timeout:
      type: "number"
      description: "Maximum time to spend on the task (milliseconds)"
      default: 30000
      minimum: 5000
      maximum: 300000
    agents:
      type: "array"
      items:
        type: "string"
      description: "Specific agents to involve (optional, auto-selects if empty)"
      default: []
      examples: [["sequence", "protein", "database"], ["analysis", "visualization"]]
    parallel_execution:
      type: "boolean"
      description: "Whether to execute subtasks in parallel when possible"
      default: true
    include_intermediate_results:
      type: "boolean"
      description: "Whether to include intermediate results in the response"
      default: false
    error_recovery:
      type: "boolean"
      description: "Whether to attempt error recovery for failed subtasks"
      default: true
    clientId:
      type: "string"
      description: "Browser client ID for multi-window support"
      default: "default"
  required: ["task"]

# High-quality examples for few-shot learning
sample_usages:
  - user_query: "Analyze the lacZ gene and find similar proteins in other organisms"
    tool_call: "coordinate_task(task='Analyze the lacZ gene and find similar proteins in other organisms', priority='high', parallel_execution=true)"
    thought: "This requires sequence analysis, database search, and protein comparison across multiple agents"
    expected_result: "Coordinated analysis involving sequence retrieval, BLAST search, and protein structure analysis"

  - user_query: "Generate a synthetic operon with regulatory elements"
    tool_call: "coordinate_task(task='Generate a synthetic operon with regulatory elements', agents=['sequence', 'ai_analysis'], timeout=60000)"
    thought: "This requires AI sequence generation and sequence analysis agents working together"
    expected_result: "Synthetic operon with promoter, genes, and terminator elements"

  - user_query: "Compare two genomes and identify unique genes"
    tool_call: "coordinate_task(task='Compare two genomes and identify unique genes', parallel_execution=true, include_intermediate_results=true)"
    thought: "This requires multiple sequence analysis and comparison operations"
    expected_result: "Comprehensive genome comparison with unique gene identification"

  - user_query: "Design a CRISPR system for gene editing"
    tool_call: "coordinate_task(task='Design a CRISPR system for gene editing', agents=['ai_analysis', 'protein'], error_recovery=true)"
    thought: "This requires AI-powered CRISPR design and protein structure analysis"
    expected_result: "Complete CRISPR system design with guide RNAs and Cas protein selection"

# Tool relationships and dependencies
relationships:
  depends_on: []
  conflicts_with: []
  enhances: ["decompose_task", "integrate_results", "assign_task_to_agent"]
  alternatives: []
  prerequisites: []
  follow_up: ["get_workflow_status", "integrate_results"]

# Performance and usage statistics
metadata:
  usage_count: 0
  success_rate: 0.0
  avg_execution_time: 0
  last_used: null
  tags: ["coordination", "multi-agent", "workflow", "advanced"]
  complexity: "complex"
  usage_pattern: "occasional"

# Error handling
error_handling:
  task_decomposition_failed: "Returns error if task cannot be decomposed into subtasks"
  agent_unavailable: "Returns error if required agents are not available"
  execution_timeout: "Returns error if task execution exceeds timeout"
  integration_failed: "Returns error if results cannot be integrated"
  partial_failure: "Returns partial results if some subtasks fail"

# Return value specification
returns:
  success: "boolean - Whether coordination was successful"
  task_id: "string - Unique identifier for this coordinated task"
  subtasks: "array - List of subtasks that were executed"
  results: "object - Integrated results from all subtasks"
  execution_time: "number - Total execution time in milliseconds"
  agents_used: "array - List of agents that participated"
  success_rate: "number - Percentage of subtasks that succeeded"
  errors: "array - List of any errors encountered"
  intermediate_results: "array - Intermediate results (if requested)"
  workflow_status: "string - Current status of the workflow"
