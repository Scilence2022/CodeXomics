name: load_variant_file
version: 1.0.0
description: Load variant files in VCF format directly by file path
category: file_operations
keywords:
  - load
  - variant
  - vcf
  - mutation
  - snp
priority: 1
execution:
  type: client
  timeout: 60000
  retries: 2
  requires_auth: false
  requires_data: false
  requires_network: false
parameters:
  type: object
  properties:
    filePath:
      type: string
      description: Absolute path to the VCF file
      examples:
        - "/path/to/variants.vcf"
        - "/path/to/snps.vcf.gz"
        - "/path/to/mutations.bcf"
    filterQuality:
      type: number
      description: Minimum quality score for variants (QUAL field)
      default: 0
      minimum: 0
    filterDepth:
      type: number
      description: Minimum read depth for variants (DP field)
      default: 0
      minimum: 0
    chromosome:
      type: string
      description: Load variants only for specific chromosome
      examples:
        - "chr1"
        - "chromosome1"
        - "NC_000913"
    startPosition:
      type: number
      description: Start position for loading variants (1-based)
      minimum: 1
    endPosition:
      type: number
      description: End position for loading variants (1-based)
      minimum: 1
    showAsTrack:
      type: boolean
      description: Whether to display variants as a track in genome browser
      default: true
    mergeWithExisting:
      type: boolean
      description: Whether to merge with existing variant data
      default: false
    clientId:
      type: string
      description: Browser client ID for multi-window support
      default: "default"
  required:
    - filePath

# High-quality examples for few-shot learning
sample_usages:
  - user_query: "Load VCF file from /data/variants.vcf"
    tool_call: "load_variant_file(filePath='/data/variants.vcf')"
    thought: "User wants to load a VCF file with all variants"
    expected_result: "VCF variants loaded and displayed as track"

  - user_query: "Load high-quality variants from /snps/filtered.vcf with QUAL > 50"
    tool_call: "load_variant_file(filePath='/snps/filtered.vcf', filterQuality=50)"
    thought: "User wants to load only high-quality variants with quality score above 50"
    expected_result: "High-quality variants loaded with quality filtering"

  - user_query: "Load variants for chromosome chr1 from /data/all_variants.vcf"
    tool_call: "load_variant_file(filePath='/data/all_variants.vcf', chromosome='chr1')"
    thought: "User wants to load variants only for chromosome chr1"
    expected_result: "Variants loaded specifically for chromosome chr1"

  - user_query: "Load variants from region 10000-50000 in /variants/sample.vcf"
    tool_call: "load_variant_file(filePath='/variants/sample.vcf', startPosition=10000, endPosition=50000)"
    thought: "User wants to load variants from a specific genomic region"
    expected_result: "Variants loaded from specified genomic region"

  - user_query: "Load variants with depth â‰¥ 10 and merge with existing data"
    tool_call: "load_variant_file(filePath='/data/new_variants.vcf', filterDepth=10, mergeWithExisting=true)"
    thought: "User wants to load variants with minimum depth and merge with current data"
    expected_result: "Filtered variants loaded and merged with existing variant data"

# Tool relationships and dependencies
relationships:
  depends_on: ["load_genome_file"]
  conflicts_with: []
  enhances: ["navigate_to_position", "analyze_region", "search_features"]
  alternatives: []
  prerequisites: ["load_genome_file"]
  follow_up: ["analyze_region", "export_data", "navigate_to_position"]

# Performance and usage statistics
metadata:
  usage_count: 0
  success_rate: 0.0
  avg_execution_time: 0
  last_used: null
  tags: ["file", "load", "variant", "vcf", "mutation", "snp"]
  complexity: "moderate"
  usage_pattern: "common"

# Error handling
error_handling:
  file_not_found: "Returns error if specified VCF file does not exist"
  invalid_vcf_format: "Returns error if file is not valid VCF format"
  no_genome_loaded: "Returns error if no genome is loaded for coordinate validation"
  compressed_file_error: "Returns error if compressed VCF file cannot be read"
  permission_denied: "Returns error if file cannot be read due to permissions"
  invalid_region: "Returns error if start/end positions are invalid"
  memory_limit: "Returns error if VCF file is too large to load"

# Return value specification
returns:
  success: "boolean - Whether VCF file was loaded successfully"
  file_path: "string - Path of the loaded VCF file"
  variants_count: "number - Number of variants loaded"
  filtered_count: "number - Number of variants after filtering"
  chromosomes: "array - List of chromosomes with loaded variants"
  variant_types: "array - Types of variants found (SNP, INDEL, etc.)"
  file_size: "number - Size of loaded file in bytes"
  load_time: "number - Time taken to load variants in milliseconds"
  quality_stats: "object - Statistics about variant quality scores"
  region_coverage: "object - Coverage information for loaded region"
  merge_result: "object - Details about merge operation if applicable"
  error_message: "string - Error message if loading failed"