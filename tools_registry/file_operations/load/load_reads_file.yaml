name: load_reads_file
version: 1.0.0
description: Load alignment files in SAM or BAM format directly by file path
category: file_operations
keywords:
  - load
  - reads
  - sam
  - bam
  - alignment
priority: 1
execution:
  type: client
  timeout: 120000
  retries: 2
  requires_auth: false
  requires_data: false
  requires_network: false
parameters:
  type: object
  properties:
    filePath:
      type: string
      description: Absolute path to the SAM/BAM file
      examples:
        - "/path/to/alignments.sam"
        - "/path/to/alignments.bam"
        - "/path/to/sorted.bam"
    indexFilePath:
      type: string
      description: Path to BAM index file (.bai), if available
      examples:
        - "/path/to/alignments.bam.bai"
        - "/path/to/alignments.bai"
    chromosome:
      type: string
      description: Load reads only for specific chromosome
      examples:
        - "chr1"
        - "chromosome1"
        - "NC_000913"
    startPosition:
      type: number
      description: Start position for loading reads (1-based)
      minimum: 1
    endPosition:
      type: number
      description: End position for loading reads (1-based)
      minimum: 1
    minMappingQuality:
      type: number
      description: Minimum mapping quality score (MAPQ)
      default: 0
      minimum: 0
      maximum: 255
    showCoverage:
      type: boolean
      description: Whether to calculate and display coverage track
      default: true
    maxReadsPerRegion:
      type: number
      description: Maximum number of reads to load per region
      default: 10000
      minimum: 100
    showUnmapped:
      type: boolean
      description: Whether to include unmapped reads
      default: false
    clientId:
      type: string
      description: Browser client ID for multi-window support
      default: "default"
  required:
    - filePath

# High-quality examples for few-shot learning
sample_usages:
  - user_query: "Load BAM file from /data/alignments.bam"
    tool_call: "load_reads_file(filePath='/data/alignments.bam')"
    thought: "User wants to load a BAM alignment file"
    expected_result: "BAM file loaded with reads displayed in genome browser"

  - user_query: "Load SAM file with high-quality reads (MAPQ â‰¥ 30)"
    tool_call: "load_reads_file(filePath='/data/reads.sam', minMappingQuality=30)"
    thought: "User wants to load only high-quality aligned reads"
    expected_result: "SAM file loaded with mapping quality filtering"

  - user_query: "Load reads for chromosome chr1 from /alignments/sample.bam"
    tool_call: "load_reads_file(filePath='/alignments/sample.bam', chromosome='chr1', showCoverage=true)"
    thought: "User wants to load reads for specific chromosome with coverage display"
    expected_result: "Reads loaded for chromosome chr1 with coverage track"

  - user_query: "Load reads from region 50000-100000 with index file"
    tool_call: "load_reads_file(filePath='/data/sorted.bam', indexFilePath='/data/sorted.bam.bai', startPosition=50000, endPosition=100000)"
    thought: "User wants to load reads from specific region using indexed BAM"
    expected_result: "Reads loaded from specified region using BAM index"

  - user_query: "Load limited reads including unmapped ones"
    tool_call: "load_reads_file(filePath='/data/all_reads.bam', maxReadsPerRegion=5000, showUnmapped=true)"
    thought: "User wants to load reads with limits and include unmapped reads"
    expected_result: "Reads loaded with specified limits including unmapped reads"

# Tool relationships and dependencies
relationships:
  depends_on: ["load_genome_file"]
  conflicts_with: []
  enhances: ["navigate_to_position", "analyze_region", "search_features"]
  alternatives: []
  prerequisites: ["load_genome_file"]
  follow_up: ["analyze_region", "export_data", "navigate_to_position"]

# Performance and usage statistics
metadata:
  usage_count: 0
  success_rate: 0.0
  avg_execution_time: 0
  last_used: null
  tags: ["file", "load", "reads", "sam", "bam", "alignment"]
  complexity: "moderate"
  usage_pattern: "common"

# Error handling
error_handling:
  file_not_found: "Returns error if specified SAM/BAM file does not exist"
  invalid_format: "Returns error if file is not valid SAM/BAM format"
  index_missing: "Returns warning if BAM index is not found (slower loading)"
  no_genome_loaded: "Returns error if no genome is loaded for alignment reference"
  permission_denied: "Returns error if file cannot be read due to permissions"
  corrupted_file: "Returns error if SAM/BAM file is corrupted"
  memory_limit: "Returns error if file is too large to load into memory"
  invalid_region: "Returns error if start/end positions are invalid"

# Return value specification
returns:
  success: "boolean - Whether SAM/BAM file was loaded successfully"
  file_path: "string - Path of the loaded alignment file"
  file_format: "string - Detected file format (SAM or BAM)"
  reads_count: "number - Number of reads loaded"
  mapped_reads: "number - Number of mapped reads"
  unmapped_reads: "number - Number of unmapped reads"
  chromosomes: "array - List of chromosomes with aligned reads"
  coverage_stats: "object - Coverage statistics if calculated"
  file_size: "number - Size of loaded file in bytes"
  load_time: "number - Time taken to load reads in milliseconds"
  index_used: "boolean - Whether BAM index was used for loading"
  quality_stats: "object - Statistics about mapping quality scores"
  region_coverage: "object - Coverage information for loaded region"
  error_message: "string - Error message if loading failed"