#!/usr/bin/env node

/**
 * GenomicDataDownloader Functionality Test
 * ÊµãËØïGenomicDataDownloaderÁ±ªÁöÑÊ†∏ÂøÉÂäüËÉΩ
 */

const fs = require('fs');

console.log('üß¨ GenomicDataDownloader Functionality Test');
console.log('==========================================');

// ËØªÂèñGenomicDataDownloader.jsÊñá‰ª∂
const downloaderContent = fs.readFileSync('src/renderer/modules/GenomicDataDownloader.js', 'utf8');

console.log('\nüîç Checking Class Structure...');

// 1. Ê£ÄÊü•Á±ªÂÆö‰πâ
if (downloaderContent.includes('class GenomicDataDownloader')) {
    console.log('‚úÖ GenomicDataDownloader class definition found');
} else {
    console.log('‚ùå GenomicDataDownloader class definition missing');
}

// 2. Ê£ÄÊü•APIÈÖçÁΩÆ
console.log('\nüîç Checking API Configurations...');

const apiDatabases = [
    'ncbi-unified',
    'embl-unified',
    'ddbj-sequences', 
    'uniprot-proteins',
    'kegg-pathways'
];

const apiConfig = downloaderContent.match(/apiConfig\s*=\s*{([\s\S]*?)};/);
if (apiConfig) {
    console.log('‚úÖ API configuration object found');
    
    let configComplete = true;
    for (const db of apiDatabases) {
        if (apiConfig[1].includes(`'${db}'`)) {
            console.log(`‚úÖ ${db} configuration exists`);
        } else {
            console.log(`‚ùå ${db} configuration missing`);
            configComplete = false;
        }
    }
    
    if (configComplete) {
        console.log('‚úÖ All database configurations present');
    }
} else {
    console.log('‚ùå API configuration object not found');
}

// 3. Ê£ÄÊü•Ê†∏ÂøÉÊñπÊ≥ï
console.log('\nüîç Checking Core Methods...');

const coreMethods = [
    'constructor()',
    'initialize()',
    'setupEventListeners()',
    'setupIpcListeners()',
    'setDownloadType(',
    'performSearch()',
    'searchNCBI(',
    'searchEMBL(',
    'downloadSelected()',
    'downloadAll()',
    'displayResults(',
    'selectOutputDirectory(',
    'clearSearch()'
];

let methodsFound = 0;
for (const method of coreMethods) {
    if (downloaderContent.includes(method)) {
        console.log(`‚úÖ ${method} method found`);
        methodsFound++;
    } else {
        console.log(`‚ùå ${method} method missing`);
    }
}

console.log(`\nüìä Core Methods: ${methodsFound}/${coreMethods.length} found`);

// 4. Ê£ÄÊü•‰∫ã‰ª∂ÁõëÂê¨Âô®
console.log('\nüîç Checking Event Listeners...');

const eventListeners = [
    'addEventListener(\'submit\'',
    'addEventListener(\'click\'',
    'onSetDownloadType',
    'onSetActiveProject'
];

let listenersFound = 0;
for (const listener of eventListeners) {
    if (downloaderContent.includes(listener)) {
        console.log(`‚úÖ ${listener} event listener found`);
        listenersFound++;
    } else {
        console.log(`‚ùå ${listener} event listener missing`);
    }
}

// 5. Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÁâπÂÆöÁöÑÊêúÁ¥¢ÊñπÊ≥ï
console.log('\nüîç Checking Database-Specific Search Methods...');

const searchMethods = [
    'searchNCBIUnified(',
    'searchEMBLUnified(',
    'searchUniProt(',
    'searchKEGG('
];

let searchMethodsFound = 0;
for (const method of searchMethods) {
    if (downloaderContent.includes(method)) {
        console.log(`‚úÖ ${method} method found`);
        searchMethodsFound++;
    } else {
        console.log(`‚ùå ${method} method missing`);
    }
}

// 6. Ê£ÄÊü•UI‰∫§‰∫íÊñπÊ≥ï
console.log('\nüîç Checking UI Interaction Methods...');

const uiMethods = [
    'displayResults(',
    'showStatusMessage(',
    'updateDownloadButtons(',
    'toggleResultSelection(',
    'clearResults('
];

let uiMethodsFound = 0;
for (const method of uiMethods) {
    if (downloaderContent.includes(method)) {
        console.log(`‚úÖ ${method} UI method found`);
        uiMethodsFound++;
    } else {
        console.log(`‚ùå ${method} UI method missing`);
    }
}

// 7. Ê£ÄÊü•È°πÁõÆÈõÜÊàêÂäüËÉΩ
console.log('\nüîç Checking Project Integration...');

const projectFeatures = [
    'setActiveProject(',
    'currentProject',
    'outputDirectory',
    'projectInfo'
];

let projectFeaturesFound = 0;
for (const feature of projectFeatures) {
    if (downloaderContent.includes(feature)) {
        console.log(`‚úÖ ${feature} project feature found`);
        projectFeaturesFound++;
    } else {
        console.log(`‚ùå ${feature} project feature missing`);
    }
}

// 8. Ê£ÄÊü•‰∏ãËΩΩÂäüËÉΩ
console.log('\nüîç Checking Download Functionality...');

const downloadFeatures = [
    'downloadItem(',
    'downloadQueue',
    'isDownloading',
    'getFileExtension(',
    'startDownload('
];

let downloadFeaturesFound = 0;
for (const feature of downloadFeatures) {
    if (downloaderContent.includes(feature)) {
        console.log(`‚úÖ ${feature} download feature found`);
        downloadFeaturesFound++;
    } else {
        console.log(`‚ùå ${feature} download feature missing`);
    }
}

// 9. Ê£ÄÊü•ÈîôËØØÂ§ÑÁêÜ
console.log('\nüîç Checking Error Handling...');

const errorHandling = [
    'try {',
    'catch',
    'console.error',
    'showStatusMessage'
];

let errorHandlingFound = 0;
for (const handler of errorHandling) {
    if (downloaderContent.includes(handler)) {
        console.log(`‚úÖ ${handler} error handling found`);
        errorHandlingFound++;
    } else {
        console.log(`‚ùå ${handler} error handling missing`);
    }
}

// 10. ÁªºÂêàËØÑ‰º∞
console.log('\nüìä Overall Functionality Assessment');
console.log('=================================');

const allChecks = [
    { name: 'Core Methods', score: methodsFound, total: coreMethods.length },
    { name: 'Event Listeners', score: listenersFound, total: eventListeners.length },
    { name: 'Search Methods', score: searchMethodsFound, total: searchMethods.length },
    { name: 'UI Methods', score: uiMethodsFound, total: uiMethods.length },
    { name: 'Project Features', score: projectFeaturesFound, total: projectFeatures.length },
    { name: 'Download Features', score: downloadFeaturesFound, total: downloadFeatures.length },
    { name: 'Error Handling', score: errorHandlingFound, total: errorHandling.length }
];

let totalScore = 0;
let totalPossible = 0;
for (const check of allChecks) {
    totalScore += check.score;
    totalPossible += check.total;
    const percentage = Math.round((check.score / check.total) * 100);
    console.log(`üìà ${check.name}: ${check.score}/${check.total} (${percentage}%)`);
}

const overallPercentage = Math.round((totalScore / totalPossible) * 100);
console.log(`\nüéØ Overall Score: ${totalScore}/${totalPossible} (${overallPercentage}%)`);

if (overallPercentage >= 90) {
    console.log('üéâ EXCELLENT! GenomicDataDownloader is fully functional');
} else if (overallPercentage >= 80) {
    console.log('‚úÖ GOOD! GenomicDataDownloader has most features implemented');
} else if (overallPercentage >= 70) {
    console.log('‚ö†Ô∏è  FAIR! GenomicDataDownloader needs some improvements');
} else {
    console.log('‚ùå POOR! GenomicDataDownloader needs significant work');
}

console.log('\n‚úÖ Functionality test completed!'); 